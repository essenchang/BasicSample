buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}
/*
 * Copyright 2015, The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'checkstyle'

def checkStyleReportPath = "${project.rootDir}/app/build/reports/"

clean.doFirst {
    delete checkStyleReportPath
}

android {
    compileSdkVersion 28
    buildToolsVersion rootProject.buildToolsVersion
    defaultConfig {
        applicationId "com.example.android.testing.unittesting.BasicSample"
        minSdkVersion 14
        versionCode 2
        versionName "2"
        targetSdkVersion 26
    }
    productFlavors {
    }
}

dependencies {
    // Unit testing dependencies.
    testImplementation 'junit:junit:' + rootProject.junitVersion;
    testImplementation 'org.mockito:mockito-core:' + rootProject.mockitoVersion;
    implementation 'com.crashlytics.sdk.android:crashlytics:2.9.9'
}

task checkStyle(type: Checkstyle) {
//    source 'src'
    source = fileTree('src/main/java')
    configFile file("${project.rootDir}/config/checkstyle/google_checks.xml")
    include '**/*.java'
    exclude '**/gen/**'
    classpath = files()
    ignoreFailures true
    reports {
        xml.enabled = true
        html.enabled = false
        xml {
            destination "${project.rootDir}/app/build/reports/checkstyle-result.xml"
        }
        html {
            destination "${project.rootDir}/app/build/reports/checkstyle-result.html"
        }

    }
}

task findbugs(type: FindBugs) {
    ignoreFailures = true
    effort = "default"
    reportLevel = "medium"
    excludeFilter = new File("${project.rootDir}/config/findbugs/findbugs-filter.xml")
    classes = files("${project.rootDir}/app/build/intermediates/javac")
    source = fileTree('src/main/java/')
    classpath = files()
    reports {
        xml.enabled = true
        html.enabled = false
        xml {
            destination "${project.rootDir}/app/build/reports/findbugs.xml"
        }
        html {
            destination "${project.rootDir}/app/build/reports/findbugs.html"
        }
    }
}

task pmd(type: Pmd) {
    ruleSetFiles = files("${project.rootDir}/config/pmd/pmd-ruleset.xml")
    ignoreFailures = true
    ruleSets = ["java-android"]

    source = fileTree('src/main/java')
    include '**/*.java'
    exclude '**/gen/**'

    reports {
        xml.enabled = true
        html.enabled = false
        xml {
            destination "${project.rootDir}/app/build/reports/pmd.xml"
        }
        html {
            destination "${project.rootDir}/app/build/reports/pmd.html"
        }
    }
}